# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI poc on actions

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: create docker image
      run: docker build -t sampad/helloworld:latest .
    - name: Nexus IQ for GitHub Actions
      uses: sonatype-nexus-community/iq-github-action@1.1.0
      with:
        # Nexus IQ Server URL
        serverUrl: http://nexus-iq-server
        # Username to connect to IQ Server for policy evaluation
        username: ${{ secrets.NEXUS_USERNAME }}  
        password: ${{ secrets.NEXUS_PASSWORD }}  
        # Determines the policy elements (policies, labels, and license threat groups) to associate with this build, and is managed via the Nexus IQ Server.
        applicationId: nexus_spring-helloworld
        # Controls the stage the policy evaluation will be run against on the Nexus IQ Server.
        stage: Build # default is Build
        # This is the path to a specific application archive file, a directory containing such archives or the ID of a Docker image. For archives, a number of formats are supported, including jar, war, ear, tar, tar.gz, zip and many others.
        target: ./target/
